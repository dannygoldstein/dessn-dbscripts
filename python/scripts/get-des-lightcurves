#!/usr/bin/env python
"""
Get light curves of supernova candidates from DES database.
"""
import sys
import os
from sys import stdout
try:
    from collections import OrderedDict as odict
except ImportError:
    odict = dict
try:
    import cx_Oracle
except:
    print ("This script requires the cx_Oracle python package. "
           "Follow instructions at\n"
           "https://github.com/esheldon/desdb#dependencies\n"
           "exiting...")
    exit()
try:
    import desdb
except:
    print ("This script requires the desdb package:\n"
           "https://github.com/esheldon/desdb\n"
           "exiting...")
    exit()
try:
    import dessn
except:
    print "The dessn module must be installed or in $PYTHONPATH."
    exit()

from optparse import OptionParser

def main():

    parser = OptionParser(usage='%prog [options] DIR',
                          description=__doc__)
    parser.add_option("-f", "--format", default='csv',
                      help=("File format for output. Options: "
                            "csv, salt2, snana."))

    opts, args = parser.parse_args(sys.argv[1:])
    if len(args) < 1:
        parser.print_help()
        sys.exit(45)

    outdir = args[0]
    if not os.path.exists(outdir):
        print "DIR must be an existing directory"
        exit()

    conn = desdb.connect()

    q = """
        SELECT DISTINCT
            a.snid, b.ra, b.dec, b.cand_type, b.cand_desc
        FROM
            snscan a, sncand b
        WHERE
            a.snid=b.snid
            AND b.snfake_id=0
            AND a.categorytype like '%SN%'
        ORDER BY
            a.snid
        """
    cands = conn.quick(q)
    ncands = len(cands)

    print '',
    for i, cand in enumerate(cands):
        print '\rsnid={:8d} ({:6d}/{:6d})'.format(cand['snid'], i+1, ncands),
        stdout.flush()

        q = """
            SELECT
                e.band, e.mjd_obs, f.flux, f.flux_err
            FROM
                exposure e, snforce f, image i
            WHERE
                f.sncand_id={:d}
                AND f.status<16
                AND i.id=f.image_id
                AND e.id=i.exposureid
            ORDER BY
                e.mjd_obs
            """.format(cand['snid'])
        data = conn.quick(q, array=True)

        # Add some metadata to cand to conform to SNANA requirements.
        cand['survey'] = 'DES'
        cand['filters'] = 'griz'
        cand['redshift_final'] = '999. +- 99.'
        cand['mwebv'] = 0.

        # Add zeropoint information to data.
        data = odict([('mjd', data['mjd_obs']),
                      ('band', data['band']),
                      ('flux', data['flux']),
                      ('fluxerr', data['flux_err']),
                      ('zp', len(data) * [31.4]),
                      ('zpsys', len(data) * ['ab'])])
        data = dessn.dict_to_array(data)
        fname = '{}/des{:07d}.dat'.format(outdir, cand['snid'])
        dessn.writelc(data, fname, meta=cand, fmt=opts.format)

if __name__ == '__main__':
    main()
