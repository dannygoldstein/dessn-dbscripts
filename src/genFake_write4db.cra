c *********************************************************
c Created Sep 2012   by R.Kessler
c
c
c Read fakeSN data file (generated by snlc_sim.exe) and write 
c info text-formatted colums that can used to load the SNFake
c tables in the des db. These SNFake tables are used by the
c NCSA pipeline to overlay fake SN into real images. 
c
c This is an snana program, and thus needs the $SNANA_DIR and
c $SNDATA_ROOT environment ... it runs at FNAL, but does NOT 
c run at NCSA.
c
c On sdssdp62,
c   snmake.pl  genFake_write4db
c
c This program should be called by genFake.pl.
c --------------------------------------------------------

+NAMES,8,6000,48000.
+USE,LINUX.
+USE,SNANA.
+USE,CERNLIB.

+USE,P=*SNCOM.
+USE,P=*SNMAIN,T=EXE.
+PAM,LUN=10, T=A,C. snana.lnk


c patch in user code (see below)

+USE,P=*USRCOM.
+USE,P=*USRCODE,T=EXE.


C =======================================
+PATCH,*USRCOM.


+KEEP,DBCOM.

      INTEGER  LUN0, LUN1, LUN2
      PARAMETER ( LUN0 = 40, LUN1 = 41, LUN2 = 42)

      INTEGER FAKEID

      CHARACTER 
     &   DBFILE0*100, DBFILE1*100, DBFILE2*100

      COMMON / FAKESNCOM / 
     &    DBFILE0, DBFILE1, DBFILE2
     &   ,FAKEID

c namelist  inputs
      CHARACTER DBVERSION*40
      INTEGER   DES_YEAR, FAKEID_START

      COMMON   / DESDBINP / DBVERSION, DES_YEAR, FAKEID_START

      NAMELIST / DESDBINP / DBVERSION, DES_YEAR, FAKEID_START
  
C ===================================
+PATCH,*USRCODE.


C ===========================================
+DECK,USRINI.
      SUBROUTINE USRINI(IERR)
c -------------------------------------
      IMPLICIT NONE
+CDE,SNDATCOM. 
+CDE,SNLCINP.
+CDE,DBCOM.

      INTEGER IERR ! (O) 0 => OK


C ------------------- BEGIN ---------------------
      IERR = 0
 
      CALL RDDBNML()

      FAKEID  = FAKEID_START

      CALL OPEN_DBFILES()

      RETURN
      END

C ===========================================
+DECK,RDDBNML.
      SUBROUTINE  RDDBNML

      IMPLICIT NONE
+CDE,SNDATCOM. 
+CDE,SNLCINP.
+CDE,DBCOM.

C ------------- BEGIN ----------

c read DBVERSION from namelist file.

      OPEN (
     &    UNIT   = LUNNML
     &   ,file   = nmlfile
     &   ,status = 'OLD'
     &   ,ERR    = 900
     &       )

      READ(LUNNML, NML=DESDBINP, ERR=901, END=902 )
      CLOSE ( UNIT = LUNNML )

      WRITE(6, NML = DESDBINP )

C #################################################

               RETURN

C #################################################


900   write(c1err,899) nmlfile
899   format('Could not open namelist file: ', A )
      c2err = " "
      CALL  MADABORT("USRINI", C1ERR, C2ERR)


901   C1ERR = 'could not read &DESDBINP namelist'
      C2ERR = "Check input-namelist file."
      CALL  MADABORT("USRINI", C1ERR, C2ERR )

902   C1ERR = 'could not find &DESDBINP namelist'
      C2ERR = "Check input-namelist file."
      CALL  MADABORT("USRINI", C1ERR, C2ERR )

      RETURN
      END

C ===========================================
+DECK,OPNFILES.
      SUBROUTINE  OPEN_DBFILES

      IMPLICIT NONE
+CDE,SNDATCOM. 
+CDE,SNLCINP.
+CDE,DBCOM.

      INTEGER LV

C -------------- BEGIN ------------

c open Db text file

      LV = INDEX(DBVERSION,' ') - 1
      DBFILE0 = DBVERSION(1:LV) // '_SNVersion.DAT'
      DBFILE1 = DBVERSION(1:LV) // '_SNFake.DAT'
      DBFILE2 = DBVERSION(1:LV) // '_SNFakeLC.DAT'

      print*,' '
      print*,' Create DB text-dump files '
      print*,'    ', DBFILE0(1:LV+20)
      print*,'    ', DBFILE1(1:LV+20)
      print*,'    ', DBFILE2(1:LV+20)
      print*,' '

      OPEN( UNIT=LUN0, FILE=DBFILE0, STATUS='UNKNOWN' )
      OPEN( UNIT=LUN1, FILE=DBFILE1, STATUS='UNKNOWN' )
      OPEN( UNIT=LUN2, FILE=DBFILE2, STATUS='UNKNOWN' )

c finish the TABLE (LUN0) now
      WRITE(LUN0,20) DBVERSION
20    format('FAKE', T20,A)

      RETURN
      END

C ===========================================
+DECK,USRANA.
      SUBROUTINE USRANA(IERR)
c
c User analysis routine for each Supernova
c See SNLC_XXX varibales in 
c      $SNANA_DIR/src/snana.car
c
c -------------------------------------
      IMPLICIT NONE
+CDE,SNDATCOM. 
+CDE,FILTCOM.
+CDE,DBCOM.

c declare subroutine args

      INTEGER IERR ! (O) 0 => OK

c local variables

      INTEGER 
     &   CID     ! candidate id
     &  ,NEWMJD
     &  ,EPMIN, EPMAX, ep
     &  ,IFILT_OBS, IFILT

      REAL 
     &   RA, DECL, MJD
     &  ,PEAKMJD, REDSHIFT
     &  ,Tobs, Trest
     &  ,SIMMAG

      REAL*8 MJD8

      CHARACTER cfilt*2, CCID*12, COMMENT*20

C ------------------- BEGIN ---------------------

      FAKEID    = FAKEID + 1

      IERR = 0

      CID       = SNLC_CID   ! integer CID
      CCID      = SNLC_CCID  ! character CCID
      RA        = SNLC8_RA
      DECL      = SNLC8_DECL
      REDSHIFT  = SNLC_REDSHIFT
      PEAKMJD   = SNLC_SEARCH_PEAKMJD

      if ( SIM_NON1A .eq. 20 .and. REDSHIFT < 1.0E-8 ) THEN
         comment = '(FIXMAG)'
      else if ( SIM_HOSTLIB_GALID > 0 ) then
         comment = '(real galaxy)'
      else
         comment = '(random location)'
      endif

      write(6,20) FAKEID, SNLC_CID, comment
20    format(T10,'WRITE FAKEID=', I8, 3x,'SNANAID=',I8, 3x, A)
      call flush(6)

      CALL DUMP_DBTABLE_SNFake()

c extract info that depends on epoch and filter

c start with loop over MJDs

      DO 200 NEWMJD = 1, ISNLC_NEWMJD_STORE

c get pointers to filter info
        EPMIN = ISNLC_EPOCH_RANGE_NEWMJD(1,NEWMJD)
        EPMAX = ISNLC_EPOCH_RANGE_NEWMJD(2,NEWMJD)

c get basic info for this MJD

        MJD8  = SNLC8_MJD(EPMIN)
        Tobs  = MJD - PEAKMJD
        Trest = Tobs / (1. + REDSHIFT)

c loop over filter(s) for this NEWMJD
        DO 201 EP = EPMIN, EPMAX

c get absolute ovserver filter-index
          IFILT_OBS = ISNLC_IFILT_OBS(ep)

c convert absolute filter indx to single-char 
          CFILT = FILTDEF_STRING(ifilt_obs:ifilt_obs)

c here is the sparse index used for storage
          IFILT     = IFILTDEF_INVMAP_SURVEY(ifilt_obs)

c extract some info from common block
          MJD          = SNLC8_MJD(ep)
          IF ( LSIM ) THEN
             SIMMAG = SIM_EPMAG(ep) ! true (unperturbed) mag             
          ENDIF

          CALL DUMP_DBTABLE_SNFAKELC(IFILT_OBS, MJD8, SIMMAG)

201     CONTINUE  ! ep
200   CONTINUE   ! NEWMJD

      RETURN
      END

C ===========================================
+DECK,USREND.
      SUBROUTINE USREND(IERR)
c
c User end-routine after all analysis/fits are done. 
c [close files, summarize statistics, global analysis, etc ...]
c
c -------------------------------------
      IMPLICIT NONE
+CDE,SNDATCOM. 
+CDE,DBCOM.

      INTEGER IERR ! (O) 0 => OK
C ------------------- BEGIN ---------------------
      IERR = 0

      CLOSE(LUN0)
      CLOSE(LUN1)
      CLOSE(LUN2)

      RETURN
      END


C =================================
+DECK,DMPSNFake.
      SUBROUTINE DUMP_DBTABLE_SNFake()

c From W. Wester e-mail on Sep 24, 2012:
c
c Table name: SNFake (index on RA and dec)
c ID                        Seq(6)
c FakeID                Num(9)
c SNanaID        Num(9)
c GalID                Num(12)
c version                Varchar2(20)
c status                Num(12)
c indNonIA        Num(6)
c year                num(6)
c Nobs                Num(6)
c z                        Binary Float
c RA                        Binary Double
c dec                        Binary Double
c peakMJD        Binary Double
c salt2C                Binary Float
c salt2x1                Binary Float
c
c ---------------------------------------
      IMPLICIT NONE
+CDE,SNDATCOM.
+CDE,DBCOM.

      INTEGER LV, ISTATUS
C ----------------- BEGIN -----------------

      LV = INDEX(DBVERSION,' ') - 1
      ISTATUS = 0
      if ( SNLC8_RA .LT. 0.0 ) SNLC8_RA = SNLC8_RA + 360.0

c BEGIN_FORMAT_SNFake

      write(LUN1,*)
     &    FAKEID                 !  absolute fakeID
     &   ,SNLC_CID               !  SNANAID
     &   ,SIM_HOSTLIB_GALID      !  GALID
     &   ,DBVERSION(1:LV)        !  fake-gen version
     &   ,ISTATUS
     &   ,SIM_NON1A              ! indNonIA
     &   ,DES_YEAR               ! DES year (2012, 2013 ...)
     &   ,ISNLC_NEWMJD_STORE      ! NOBS
     &   ,SNLC_REDSHIFT
     &   ,SNLC8_RA
     &   ,SNLC8_DECL
     &   ,SIM_PEAKMJD            ! peak-MJD
     &   ,SIM_COLORPAR           ! SALT2c or AV
     &   ,SIM_SHAPEPAR           ! shape param
     &   ,SNLC_FIELD             ! name of field 
 
c END_FORMAT_SNFake

      RETURN
      END


C ==============================================
+DECK,DMPFAKELC.
      SUBROUTINE DUMP_DBTABLE_SNFAKELC(IFILT_OBS, MJD8, SIMMAG)

c From W. Wester e-mail (Sep 24,  2012)
c
c Table name: SNFakeLC
c ID                        Seq(9)
c SNanaID        Num(9)
c FakeID                Num(9)
c gridMJD                Binary Double
c gridMag                Binary Float
c ----------------------        

      IMPLICIT NONE
+CDE,SNDATCOM.
+CDE,DBCOM.
+CDE,FILTCOM.

      INTEGER IFILT_OBS  ! (I) 
      REAL*8  MJD8       ! (I)
      REAL*4  SIMMAG     ! (I)

C ------------------ BEGIN -------------

c BEGIN_FORMAT_SNFakeLC 

      write(LUN2,*)
     &   SNLC_CID       ! SNANAID
     &  ,FAKEID         ! absolute FAKE ID
     &  ,MJD8           ! Modified Julien Date
     &  ,SIMMAG         ! true (exact) mag
     &  ,FILTDEF_STRING(IFILT_OBS:IFILT_OBS)  ! filter char

c END_FORMAT_SNFakeLC

      RETURN
      END
