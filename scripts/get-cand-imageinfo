#!/usr/bin/env python
"""Fetch image metadata from NCSA database for images containing the given
supernova candidate. In order to tell if a given position is contained
in a given image, the full WCS solution of the image is required (including
PV?_?? keywords). This script downloads the WCS values for every image in
the SN fields, and uses that information to determine which images cover the
given position(s). With no positional arguments, the script will just download
the image metadata but not output any text files.
"""

import os
import sys
import math
import time
from optparse import OptionParser

import numpy as np
import desdb

cache_filename = 'des-imageinfo-cache.npy'
cache_filename_diff = 'des-imageinfo-cache-diff.npy'
cache_filename_search = 'des-imageinfo-cache-search.npy'

image_query_template = """
SELECT
    filename,
    filetype,
    band,
    ccdnum,
    nite,
    expnum,
    field,
    rac1, decc1,
    rac2, decc2,
    rac3, decc3,
    rac4, decc4
FROM
    image
WHERE
    ccdnum != 61 AND
    {0}
ORDER BY
    expnum
"""


def parse_args():
    parser=OptionParser(usage= '%prog [options]\n'
                        '       %prog [options] SNID [SNID ...]\n'
                        '       %prog [options] RA,DEC [RA,DEC ...]',
                        description=__doc__)
    parser.add_option('--dbname', default='desoper',
                      help="Database name to connect to: desoper, destest "
                      "[default: desoper]")
    #parser.add_option('--diff', default=False, action="store_true",
    #                  help="Nightly difference images "
    #                  "rather than reduced ('red') images.")
    #parser.add_option('--search', default=False, action="store_true",
    #                  help="Nightly search images: the "
    #                  "combined image for deep fields griz and shallow field "
    #                  "z-band, and the single image for shallow field "
    #                  "gri-band rather than reduced ('red') images.")
    parser.add_option('-o', '--outfile', default='{snid}.csv',
                      help="Format of filename to write output. Must "
                      "contain '{snid}' which will be replaced by the SNID "
                      "for each candidate. Default: '{snid}.csv'.")
    parser.add_option('--cachefile', default=None,
                      help="File to use as cache. Default is "
                      "des-imageinfo-cache[-diff,-search].npy "
                      "depending on --diff  and --search flags.")
    opts, args = parser.parse_args(sys.argv[1:])
    #if opts.diff and opts.search:
    #    print "Conflicting options: --diff and --search"
    #    exit()
    snids = args

    return opts, snids


def point_line_side(pointx, pointy, x1, y1, x2, y2):
    """Determine what side of a line a point is on.

    Returns positive number if point is on left side of the line from
    (x1,y1) to (x2,y2).
    Returns 0 if point is on the line.
    Returns negative number if point is on the right side.
    """
    return (x2-x1) * (pointy-y1) - (y2-y1) * (pointx-x1)


def point_within_quad(pointx, pointy, x1, y1, x2, y2, x3, y3, x4, y4):
    """Determine if an (x, y) point lies within a quadrilateral.

    (x1, y1) is the first corner of the quadrilateral, (x2,y2) is the adjacent
    corner proceeding counterclockwise (CCW), etc. Note that the direction
    is significant.
    """
    return ((point_line_side(pointx, pointy, x1, y1, x2, y2) >= 0.) &
            (point_line_side(pointx, pointy, x2, y2, x3, y3) >= 0.) &
            (point_line_side(pointx, pointy, x3, y3, x4, y4) >= 0.) &
            (point_line_side(pointx, pointy, x4, y4, x1, y1) >= 0.))


def build_radec_query(snid):
    return """
    SELECT
        ra, dec
    FROM
        sncand
    WHERE
        snid = {:d}
    """.format(snid)

# I think this is the right filetype, but not sure.
def build_red_image_query():
    return image_query_template.format("filetype = 'snxtalked_sci'")


#def build_diff_image_query():
#    condition = """
#    (
#      /* coadd image if deep field or z band */
#      (i.imagetype='diff_nitecmb_diff'
#       and
#       (substr(e.object,22,2) in ('C3','X3') or i.band='z'))
#
#      or
#
#      /* single image if shallow field and gri band */
#      (i.imagetype='diff_single_diff'
#       and
#       substr(e.object,22,2) in ('C1','C2','E1','E2','S1','S2','X1','X2')
#       and
#       i.band in ('g', 'r', 'i'))
#    )
#    AND
#    i.imagename like '%_diff_%'  /* eliminate _temp_ images */
#
#    """
#    return image_query_template.format(condition)


#def build_search_image_query():
#    condition = """
#    (
#      /* coadd image if deep field or z band */
#      (i.imagetype='diff_nitecmb_search'
#       and
#       (substr(e.object,22,2) in ('C3','X3') or i.band='z'))
#
#      or
#
#      /* single image if shallow field and gri band */
#      (i.imagetype='diff_single_search'
#       and
#       substr(e.object,22,2) in ('C1','C2','E1','E2','S1','S2','X1','X2')
#       and
#       i.band in ('g', 'r', 'i'))
#    )
#    AND
#    i.imagename not like '%_temp_%'  /* eliminate _temp_ images */
#
#    """
#    return image_query_template.format(condition)


# Main --------------------------------------------------------------------- #
if __name__ == '__main__':

    # Get arguments
    opts, snids = parse_args()
    conn = desdb.connect(dbname=opts.dbname)

    #if opts.diff:
    #    cachename = cache_filename_diff
    #    q = build_diff_image_query()
    #elif opts.search:
    #    cachename = cache_filename_search
    #    q = build_search_image_query()
    #else:
    cachename = cache_filename
    q = build_red_image_query()

    # see if user defined custom cache file location
    if opts.cachefile is not None:
        cachename = opts.cachefile

    # Run the query if cache file is missing.
    if not os.path.exists(cachename):
        print ("Querying database for image metadata "
               "(this can take several minutes)...")
        t0 = time.time()
        data = conn.quick(q, array=True)
        elapsed = time.time() - t0
        print "Query took {0:d}m{1:4.1f}s, {2:.2f} MB array.".format(
            int(elapsed)/60, elapsed%60, data.nbytes/1.e6)
        print "Saving to {0}...".format(cachename)
        np.save(cachename, data)
    else:
        print "Loading from {0}...".format(cachename)
        data = np.load(cachename)

    print "{0:d} total images from SN fields.".format(len(data))

    print data['rac3'].min(), data['rac3'].max()
    print data['decc3'].min(), data['decc3'].max()
    print data['rac4'].min(), data['rac4'].max()
    print data['decc4'].min(), data['decc4'].max()

    for j, snid in enumerate(snids):

        # Check if this snid is actually a position.
        if ',' in snid:
            ra, dec = snid.split(',')
            ra = float(ra)
            dec = float(dec)
            snid = j

        # Otherwise get the position from the database.
        else:
            snid = int(snid)
            q = build_radec_query(snid)
            pos = conn.quick(q)
            ra, dec = pos[0]['ra'], pos[0]['dec']
        print "SNID {0:8d}: ra={1:9.6f} dec={2:9.6f}".format(snid, ra, dec)

        # Which images overlap the position?
        mask = point_within_quad(ra, dec,
                                 data['rac1'], data['decc1'],
                                 data['rac2'], data['decc2'],
                                 data['rac3'], data['decc3'],
                                 data['rac4'], data['decc4'])
        posdata = data[mask]
        print (15*" " +
               "{0:d} images / {1:d} unique exposures / {2:d} unique ccds"
               .format(len(posdata), len(np.unique(posdata['expnum'])),
                       len(np.unique(posdata['ccdnum']))))

        # Save to file:
        fname = opts.outfile.replace('{snid}', str(snid))
        fname = fname.replace('{SNID}', str(snid))
        with open(fname, 'w') as f:
            f.write('field,band,expnum,ccdnum,imagetype,imagename\n')
            for i in range(len(posdata)):
                f.write('{0:s},{1:s},{2:d},{3:d},{4:s},{5:s}\n'
                        .format(posdata['field'][i],
                                posdata['band'][i],
                                posdata['expnum'][i],
                                posdata['ccdnum'][i],
                                posdata['filetype'][i],
                                posdata['filename'][i]))
        print 15*" " + "Wrote image info:", fname
